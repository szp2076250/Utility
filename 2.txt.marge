#include "md5.h"
#include <stdio.h>
#include <vector>
#include <algorithm>
#include <map>

#define CHUNK_SIZE 100
#define MOD_DIGEST 65521
#define MD5_SIZE 17

void FileDelete(const AString& strName,int pos,int length){
    auto file = fopen(strName.c_str(),"rb+");
    auto file2 = fopen((strName+".psync").c_str(),"w+");
    char buffer[CHUNK_SIZE];
    int size = 0;
    int TotalSize = 0;

    int count = pos/CHUNK_SIZE;
    while(count>0){
        size = fread(buffer,sizeof(char),CHUNK_SIZE,file);
        fwrite(buffer,sizeof(char),size,file2);
        TotalSize+=size;
        count--;
    }

    size = fread(buffer,sizeof(char),pos-TotalSize,file);
    fwrite(buffer,sizeof(char),size,file2);
    TotalSize+=size;

    fseek(file,length,SEEK_CUR);
    
    while((size = fread(buffer,sizeof(char),CHUNK_SIZE,file))>0){
        fwrite(buffer,sizeof(char),size,file2);
    }
    fclose(file);
    fclose(file2);
}

void FileInsert(const AString& strName,int pos,const AString& strContent){
    auto file = fopen(strName.c_str(),"rb+");
    auto file2 = fopen((strName+".psync").c_str(),"w+");
    char buffer[CHUNK_SIZE];
    int  size = 0;
    int  TotalRead = 0;

    auto RemainWrite = [&](int length){
        size = fread(buffer,sizeof(char),length,file);
        fwrite(buffer,sizeof(char),size,file2);
        
        fwrite(strContent.c_str(),sizeof(char),strContent._length(),file2);

        while((size = fread(buffer,sizeof(char),CHUNK_SIZE,file))>0){
            fwrite(buffer,sizeof(char),size,file2);
        }
    };

    int count = pos/CHUNK_SIZE;
    while(count>0){
        size = fread(buffer,sizeof(char),CHUNK_SIZE,file);
        fwrite(buffer,sizeof(char),size,file2);
        TotalRead+=size;
        count--;
    }

    RemainWrite(pos - TotalRead);

    fclose(file);
    fclose(file2);
}

void FileMarge(const AString& src,int pos,const char* diff,int size){
    FileDelete(src,pos,size);
    FileInsert(src+".psync",pos,diff);
}

struct ChunkData{
    long AValue;
    long BValue;
    const char * MValue;
    ChunkData(){}
    ChunkData(long a,long b,const char * m):AValue(a),BValue(b),MValue(m){}
    bool operator==(const ChunkData& data){
        if(AValue != data.AValue) return false;
        if(BValue != data.BValue) return false;
        if(AString(MValue) == AString(data.MValue)) return false;
        return true;
    }
};

struct FileData{
    vector<ChunkData>  ls;
    const char * filename;
    const char * filepath;
    FileData(){}
    FileData(vector<ChunkData>  l,const char * n):ls(l),filename(n){
    }
};



template<typename T>
vectorT> LoadDiff(const AString& name){
    auto file = fopen(name.c_str(),"rb");
    vector<T> ls;
    
    T obj;
    int size = 0;
    while((size = fread(&obj,sizeof(T),1,file))>0){
        for(int index =0;index<size;index++)
            ls.push_back(obj);
    }
    fclose(file);
    return ls;
}

struct diff{
    int rvalue;
    int index;
    char MD5Value[MD5_SIZE];
    diff(){};
    diff(long av,long bv,const char* mv)
    {
        rvalue = bv<<16|av;
        memset(MD5Value,0,sizeof(MD5Value));
        memcpy(MD5Value,mv,MD5_SIZE);
    };

    bool operator==(const diff & df){
        if(rvalue != df.rvalue) return false;
        return strcmp(MD5Value,df.MD5Value) == 0;
    }

    friend ostream& operator<<(ostream &of,diff  df){
        of<<"rvalue : "<<df.rvalue<<" md5 : "<<df.MD5Value<<"\n";
        return of;
    }

    friend istream& operator>>(istream &in,diff df){
        in>>df.rvalue>>df.MD5Value;
        return in;
    }
};

void SaveDiff(const AString& name,vector<diff> ls){
    auto file = fopen(name.c_str(),"w+");
    for_each(ls.begin(),ls.end(),[&](diff& item){
        // fwrite(&item,sizeof(diff),1,file);
        fwrite(&item.rvalue,sizeof(item.rvalue),1,file);
        fwrite(&item.MD5Value,sizeof(item.MD5Value),1,file);
    });
    fclose(file);
}

vector<diff> CalcFileSlideDiff(const AString& filename){
    vector<diff> data;
    auto file = fopen(filename.c_str(),"rb+");
    char buf[CHUNK_SIZE];

    int size = 0;
    int pos = 0;

    while(( size = fread(buf,sizeof(char),sizeof(buf),file))>0){
        auto MValue = MD5::Md516(buf,size);
        long AValue = 1,BValue = 0;
        for(int index=0;index<size;index++){
            AValue = (AValue + static_cast<int>(buf[index]))%MOD_DIGEST;
            BValue = (BValue + AValue)%MOD_DIGEST;
        }

        diff df = diff(AValue,BValue,MValue.c_str());
        df.index = pos;
        pos+=size;
        log(MValue);
        data.push_back(df);
    }
    log("diff size: ",data.size());
    fclose(file);
    return data;
}

vector<diff> CalcFileDiff(const AString& filename){
    vector<diff> data;

    auto file = fopen(filename.c_str(),"rb+");
    char buf[CHUNK_SIZE];

    int pos = 0;
    int size = 0;
    int startpos = 0;

    while((size = fread(buf,sizeof(char),sizeof(buf),file))>0){
        auto MValue = MD5::Md516(buf,size);
        long AValue = 1, BValue = 0; 
        for(int index=0;index<size;index++){
            AValue = (AValue+static_cast<int>(buf[index]))%MOD_DIGEST;
            BValue = (BValue + AValue)%MOD_DIGEST;
        }

        diff df = diff(AValue,BValue,MValue.c_str());
        df.index = pos++;
        data.push_back(df);

        fseek(file,++startpos,SEEK_SET);
        memset(buf,0,sizeof(buf));
    }
    fclose(file);
    return data;
}

struct rage{
    int start;
    int length;
    range(int st,int lg):start(st),length(lg){}
    range(){} zzzjklsadfjlkjasfld
};



